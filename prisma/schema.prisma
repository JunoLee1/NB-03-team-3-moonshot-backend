// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------
// User
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String?
  nickname     String?  @unique @default("")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  profileImage String?

  provider   String?
  provider_id String?
  members    Member[]
  comments   Comment[]
}

//--------------------------------------------------------------------

model Member {
  id        Int      @id @default(autoincrement())
  role      String?
  joined_at  DateTime
  status    status   @map("status")
  user_id   Int
  users     User     @relation(fields: [user_id], references: [id])
  tasks     Task[]
  projects  Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int // 컨벤션 통일 필요
}

enum status {
  pending
  accepted
  rejected
}

//--------------------------------------------------------------------

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task_id   Int
  user_id   Int
  tasks     Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [user_id], references: [id], onDelete: Cascade) // 멤버가 탈퇴 시 댓글 삭제, 의논 필요.
}

//--------------------------------------------------------------------

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  tasks       Task[]
  members     Member[]
}

//--------------------------------------------------------------------

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  start_year  Int
  start_month Int
  start_day   Int
  end_year    Int
  end_month   Int
  end_date    Int
  task_status  Status   @map("status")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  project_id  Int
  member_id   Int
  projects    Project      @relation(fields: [project_id], references: [id], onDelete: Cascade)
  members     Member       @relation(fields: [member_id], references: [id], onDelete: Cascade) // 멤버 삭제 시 할 일 삭제, 의논 필요. onDelete: SetNull 사용 시 담당자 재할당 로직 추가 필요.
  comments    Comment[]
  attachments Attachment[]
  subtasks    Subtask[]
  tags        Tag[]
}

enum Status {
  todo
  in_progress
  done
}

//--------------------------------------------------------------------
model Tag {
  id   Int     @id @default(autoincrement())
  name String?

  task_id Int
  tasks   Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

//--------------------------------------------------------------------

model Subtask {
  id           Int      @id @default(autoincrement())
  task_id      Int
  tasks        Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  title        String
  is_completed Boolean
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

//--------------------------------------------------------------------

model Attachment {
  id          Int      @id @default(autoincrement())
  url         String?
  name        String?
  uploaded_at DateTime
  task_id     Int
  tasks       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
}
